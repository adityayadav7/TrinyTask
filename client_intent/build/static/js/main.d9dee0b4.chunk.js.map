{"version":3,"sources":["logo.svg","component/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","props","state","intent","axios","get","then","res","setState","data","catch","err","console","log","className","AppBar","Toolbar","this","map","d","i","key","Accordion","AccordionSummary","Typography","info","displayName","AccordionDetails","messages","d1","j","text","element","k","PureComponent","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,6NCgF5BC,E,kDApEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,OAAQ,IAJG,E,gEAOE,IAAD,OAChBC,IAAMC,IAAI,2DACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVL,OAAQI,EAAIE,UAGnBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,+BAKpB,OACI,yBAAKG,UAAU,aACX,yBAAKA,UAAU,cACP,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,qBAKPC,KAAKf,MAAMC,OAAOe,KAAI,SAACC,EAAGC,GACvB,OACI,yBAAKC,IAAKD,EAAGN,UAAU,IACnB,kBAACQ,EAAA,EAAD,CAAWR,UAAU,eACjB,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYV,UAAU,WAAWK,EAAEM,KAAKC,cAE5C,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAD,KACKL,EAAEM,KAAKG,SAASV,KAAI,SAACW,EAAIC,GACtB,OACI,yBAAKT,IAAKS,GACN,6BAEQD,EAAGE,KAAKA,KAAKb,KAAI,SAACc,EAASC,GACvB,OACI,yBAAKnB,UAAU,OAAOO,IAAKY,GACvB,6BAAMD,yB,GA/C1DE,iBCgDTC,E,kDApDb,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,OAAO,IAJQ,E,qDAUjB,OACE,yBAAKW,UAAU,OACb,kBAAC,EAAD,W,GAbUsB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.d9dee0b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { PureComponent } from 'react'\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport axios from 'axios';\nclass Dashboard extends PureComponent {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            intent: []\n        }\n    }\n    componentDidMount() {\n        axios.get('http://localhost:5001/task-870cf/us-central1/api/intent')\n            .then(res => {\n                this.setState({\n                    intent: res.data\n                })\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <div className=\"container2\">\n                        <AppBar >\n                            <Toolbar>\n                              Intent List\n                            </Toolbar>\n                        </AppBar>\n                    \n                    {this.state.intent.map((d, i) => {\n                        return (\n                            <div key={i} className=\"\" >\n                                <Accordion className=\"radius-zero\">\n                                    <AccordionSummary>\n                                        <Typography className=\"intents\">{d.info.displayName}</Typography>\n                                    </AccordionSummary>\n                                    <AccordionDetails>\n                                        <Typography>\n                                            {d.info.messages.map((d1, j) => {\n                                                return (\n                                                    <div key={j}>\n                                                        <div>\n                                                            {\n                                                                d1.text.text.map((element, k) => {\n                                                                    return (\n                                                                        <div className=\"flex\" key={k}>\n                                                                            <div>{element}</div>\n                                                                        </div>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                )\n                                            })}\n                                        </Typography>\n                                    </AccordionDetails>\n                                </Accordion>\n\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard","\nimport React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport Dashboard from \"./component/Dashboard\";\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      intent:[]\n    }\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard/>\n      {/* <header className=\"App-header\">\n       \n        <p>\n          <div>\n            {this.state.intent.map((d,i)=>{\n              return(\n                <div key={i}>\n                  <div>{d.info.displayName}\n                     <div>\n                       {d.info.messages.map((d1,j)=>{\n                         return(\n                         <div key={j}>\n                           <div>{d1.text}</div>\n                           <div>{d1.message}</div>\n                         </div>\n                         )\n                       })}\n                     </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}